enum ContactType {
	WORK, PERSONAL, HOME, OFFICE, MAIN, OTHER, PRIMARY
}

entity Region {
	regionName String required pattern(/^[A-Z][a-zA-Z0-9 -]*$/) maxlength(255)
}

entity Country {
	countryName String required pattern(/^[A-Z][a-zA-Z0-9 -]*$/) maxlength(255)
}

entity City {
	cityName String required pattern(/^[A-Z][a-zA-Z0-9 -]*$/) maxlength(255),
    stateName String required pattern(/^[A-Z][a-zA-Z0-9 -]*$/) maxlength(255)
}

// bi-directional
relationship OneToMany {
  Region{countries(countryName)} to Country{region(regionName) required}
  Country{cities(cityName)} to City{country(countryName) required}
}

// an ignored comment
/** not an ignored comment */
entity Address {
	buildingAddress String required,
	streetAddress String,
	postalCode String required
}

/** Phone number */
entity PhoneNumber {
	type ContactType required,
	countryCode String required,
    phoneNumber String required pattern(/^[-\s\./0-9]*$/) maxlength(255) minlength(5)
}

/** Email Address */
entity EmailAddress {
	type ContactType required,
	emailAddress String required maxlength(255) pattern(/^[a-zA-Z0-9\.\!\#\$\%\&\*\+\/\=\?\^\_\`\{\|\}\~\-]+@[a-zA-Z0-9-]+\.(?:[a-zA-Z0-9-]+)*$/)
}

//uni-drectional
relationship ManyToOne {
  Address{city(displayString) required} to City
}

entity Contact {
	firstName String required pattern(/^[A-Z][a-z]+$/) maxlength(255),
    lastName String required pattern(/^[A-Z][a-z]+$/) maxlength(255),
    designation String pattern(/^[A-Z][a-z]+$/) maxlength(255)
    notes String maxlength(65535)
}

// bi-directional
relationship OneToMany {
  Contact{phones(phoneNumber)} to PhoneNumber{contact}
  Contact{emails(emailAddress)} to EmailAddress{contact}
}

entity Location {
	name String required pattern(/^[A-Z][a-z]+\d*$/) maxlength(255),
    panNumber String required maxlength(255),
    gstNumber String required maxlength(255)
}

relationship OneToOne {
  Contact{address required} to Address
  Location{contact required} to Contact
}

enum CounterPartyType {
	CUSTOMER, SELLER, BOTH, SISCONCERN, TRANSPORTER, BANK, AGENCY, CLEARING, SHIPPING, PACKING, SERVICE, OTHER
}

entity CounterParty {
	name String required maxlength(255),
    type CounterPartyType,
    notes String maxlength(65535)
}

// bi-directional
relationship OneToMany {
  CounterParty{locations(displayString) required} to Location{counterParty(name)}
}

enum ProductCategory {
	RAWMATERIAL, FINISHEDGOODS, CONSUMABLE, PACKINGMATERIAL, OFFICESUPPLIES
}

enum QuantityType {
  VOLUME,
  WEIGHT,
  LENGTH,
  TEMPERATURE,
  PIECES,
  OTHER
}

entity ProductType {
	name String required maxlength(255),
    category ProductCategory,
    quantityType QuantityType,
    hsnNumber String required,
    description String required maxlength(65535)
}

entity Product {
	name String required maxlength(255),
    productCode String required maxlength(10)
}

entity ProductAlias {
	name String required maxlength(255)
}

// bi-directional
relationship OneToMany {
  Product{aliases(name) required} to ProductAlias{product(name)}
  ProductType{product(name) required} to Product{productType(name)}
}

entity Unit {
    name String required maxlength(10),
    quantityType QuantityType,
    fullName String required maxlength(50),
    baseUnitMultiplier Integer required,
    isSmallerThanBase Boolean required /** If the unit is smaller than base unit then check this flag */
}

service all with serviceImpl